services:

  broker:
    image: apache/kafka:4.0.0
    container_name: broker
    hostname: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_CONFIG_DIR: /var/lib/kafka-config
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 3s

  create-topics:
    image: apache/kafka:4.0.0
    container_name: create-topics
    depends_on:
      broker:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic __consumer_offsets --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic demo --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      "
    restart: "no"


  app:
    build: .
    container_name: demo-app
    depends_on:
      broker:
        condition: service_healthy
      create-topics:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    restart: always
